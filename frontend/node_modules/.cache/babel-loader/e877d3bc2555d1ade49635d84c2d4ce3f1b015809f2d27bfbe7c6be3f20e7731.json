{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Atik\\\\Videos\\\\Medicine\\\\frontend\\\\src\\\\pages\\\\UsersManagement.js\",\n  _s = $RefreshSig$();\n/*\r\n * USERS MANAGEMENT COMPONENT - ADMIN USER CONTROL SYSTEM\r\n * \r\n * This component demonstrates:\r\n * 1. User administration functionality in React\r\n * 2. Real-time user status updates via Django API\r\n * 3. Role-based access control (customer vs admin)\r\n * 4. Interactive table with inline editing capabilities\r\n * 5. Optimistic UI updates for better user experience\r\n * \r\n * DJANGO INTEGRATION:\r\n * - Fetches user list from Django User model via REST API\r\n * - Updates user status (active/inactive) through Django endpoints\r\n * - Manages user roles (customer/admin) with Django permissions\r\n * - Uses JWT authentication for admin-only operations\r\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersManagement = () => {\n  _s();\n  /*\r\n   * COMPONENT STATE MANAGEMENT\r\n   * \r\n   * This component manages three key pieces of state:\r\n   * - users: Array of all users fetched from Django backend\r\n   * - loading: Boolean to show loading spinner during API calls\r\n   * - selectedUser: Currently selected user (for future modal/detail view)\r\n   */\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  /*\r\n   * COMPONENT LIFECYCLE - FETCH USERS ON MOUNT\r\n   * \r\n   * When component first loads, fetch all users from Django backend.\r\n   * This demonstrates the typical pattern of loading data when component mounts.\r\n   */\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  /*\r\n   * FETCH USERS FROM DJANGO BACKEND\r\n   * \r\n   * This function demonstrates:\r\n   * 1. Making authenticated API calls to Django\r\n   * 2. Handling async operations with try/catch\r\n   * 3. Updating component state with fetched data\r\n   * 4. Managing loading states for better UX\r\n   */\n  const fetchUsers = async () => {\n    try {\n      // Call Django admin endpoint to get all users\n      const response = await fetch('/api/accounts/admin/users/', {\n        headers: {\n          // JWT token required for admin operations\n          'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Update component state with user data from Django\n        setUsers(data);\n      }\n    } catch (error) {\n      // Silent error handling - could show user notification in production\n    } finally {\n      // Always stop loading, whether success or error\n      setLoading(false);\n    }\n  };\n\n  /*\r\n   * UPDATE USER STATUS (ACTIVATE/DEACTIVATE)\r\n   * \r\n   * This function demonstrates:\r\n   * 1. Making PUT requests to update Django User model\r\n   * 2. Sending JSON data to Django REST API\r\n   * 3. Optimistic UI updates (refresh data after successful update)\r\n   * 4. Admin functionality for user account management\r\n   */\n  const updateUserStatus = async (userId, isActive) => {\n    try {\n      // Send PUT request to Django to update user's active status\n      const response = await fetch(`/api/accounts/admin/users/${userId}/status/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n        },\n        // Send new status as JSON to Django\n        body: JSON.stringify({\n          is_active: isActive\n        })\n      });\n      if (response.ok) {\n        // Refresh user list to show updated status\n        fetchUsers();\n      }\n    } catch (error) {\n      // Silent error handling\n    }\n  };\n\n  /*\r\n   * UPDATE USER TYPE (CUSTOMER/ADMIN ROLE)\r\n   * \r\n   * This function manages user roles and permissions:\r\n   * 1. Updates user_type field in Django User model\r\n   * 2. Controls access levels (customer vs admin privileges)\r\n   * 3. Demonstrates role-based access control implementation\r\n   * 4. Shows how to update specific fields via REST API\r\n   */\n  const updateUserType = async (userId, userType) => {\n    try {\n      // Send PUT request to update user's role/type\n      const response = await fetch(`/api/accounts/admin/users/${userId}/type/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n        },\n        // Send new user type to Django\n        body: JSON.stringify({\n          user_type: userType\n        })\n      });\n      if (response.ok) {\n        // Refresh user list to reflect role changes\n        fetchUsers();\n      }\n    } catch (error) {\n      // Silent error handling\n    }\n  };\n\n  // Loading state - show spinner while fetching users\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center min-h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  }\n\n  /*\r\n   * MAIN COMPONENT RENDER - INTERACTIVE USER TABLE\r\n   * \r\n   * This renders a comprehensive user management interface with:\r\n   * 1. Tabular display of all users from Django\r\n   * 2. Inline editing for user roles (dropdown selection)\r\n   * 3. Status indicators with conditional styling\r\n   * 4. Action buttons for user activation/deactivation\r\n   * 5. Responsive design with Tailwind CSS\r\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-gray-800 mb-6\",\n      children: \"Users Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full divide-y divide-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"bg-gray-50\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"bg-white divide-y divide-gray-200\",\n          children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-6 py-4 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"ml-4\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-sm font-medium text-gray-900\",\n                    children: user.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-6 py-4 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-900\",\n                children: user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-6 py-4 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: user.user_type,\n                onChange: e => updateUserType(user.id, e.target.value),\n                className: \"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"customer\",\n                  children: \"Customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"admin\",\n                  children: \"Admin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-6 py-4 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `px-2 py-1 text-xs rounded-full ${user.is_active ? 'bg-green-100 text-green-800' // Active user styling\n                : 'bg-red-100 text-red-800' // Inactive user styling\n                }`,\n                children: user.is_active ? 'Active' : 'Inactive'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-6 py-4 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => updateUserStatus(user.id, !user.is_active),\n                className: `px-3 py-1 rounded-md ${user.is_active ? 'bg-red-100 text-red-600 hover:bg-red-200' // Deactivate button\n                : 'bg-green-100 text-green-600 hover:bg-green-200' // Activate button\n                }`,\n                children: user.is_active ? 'Deactivate' : 'Activate'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 33\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n_s(UsersManagement, \"7Ucy0lFzJOZbr7f3C9Rbw74aeqk=\");\n_c = UsersManagement;\nexport default UsersManagement;\nvar _c;\n$RefreshReg$(_c, \"UsersManagement\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UsersManagement","_s","users","setUsers","loading","setLoading","selectedUser","setSelectedUser","fetchUsers","response","fetch","headers","localStorage","getItem","ok","data","json","error","updateUserStatus","userId","isActive","method","body","JSON","stringify","is_active","updateUserType","userType","user_type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","username","email","value","onChange","e","id","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Atik/Videos/Medicine/frontend/src/pages/UsersManagement.js"],"sourcesContent":["/*\r\n * USERS MANAGEMENT COMPONENT - ADMIN USER CONTROL SYSTEM\r\n * \r\n * This component demonstrates:\r\n * 1. User administration functionality in React\r\n * 2. Real-time user status updates via Django API\r\n * 3. Role-based access control (customer vs admin)\r\n * 4. Interactive table with inline editing capabilities\r\n * 5. Optimistic UI updates for better user experience\r\n * \r\n * DJANGO INTEGRATION:\r\n * - Fetches user list from Django User model via REST API\r\n * - Updates user status (active/inactive) through Django endpoints\r\n * - Manages user roles (customer/admin) with Django permissions\r\n * - Uses JWT authentication for admin-only operations\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst UsersManagement = () => {\r\n    /*\r\n     * COMPONENT STATE MANAGEMENT\r\n     * \r\n     * This component manages three key pieces of state:\r\n     * - users: Array of all users fetched from Django backend\r\n     * - loading: Boolean to show loading spinner during API calls\r\n     * - selectedUser: Currently selected user (for future modal/detail view)\r\n     */\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n\r\n    /*\r\n     * COMPONENT LIFECYCLE - FETCH USERS ON MOUNT\r\n     * \r\n     * When component first loads, fetch all users from Django backend.\r\n     * This demonstrates the typical pattern of loading data when component mounts.\r\n     */\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    /*\r\n     * FETCH USERS FROM DJANGO BACKEND\r\n     * \r\n     * This function demonstrates:\r\n     * 1. Making authenticated API calls to Django\r\n     * 2. Handling async operations with try/catch\r\n     * 3. Updating component state with fetched data\r\n     * 4. Managing loading states for better UX\r\n     */\r\n    const fetchUsers = async () => {\r\n        try {\r\n            // Call Django admin endpoint to get all users\r\n            const response = await fetch('/api/accounts/admin/users/', {\r\n                headers: {\r\n                    // JWT token required for admin operations\r\n                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\r\n                },\r\n            });\r\n            \r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                // Update component state with user data from Django\r\n                setUsers(data);\r\n            }\r\n        } catch (error) {\r\n            // Silent error handling - could show user notification in production\r\n        } finally {\r\n            // Always stop loading, whether success or error\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * UPDATE USER STATUS (ACTIVATE/DEACTIVATE)\r\n     * \r\n     * This function demonstrates:\r\n     * 1. Making PUT requests to update Django User model\r\n     * 2. Sending JSON data to Django REST API\r\n     * 3. Optimistic UI updates (refresh data after successful update)\r\n     * 4. Admin functionality for user account management\r\n     */\r\n    const updateUserStatus = async (userId, isActive) => {\r\n        try {\r\n            // Send PUT request to Django to update user's active status\r\n            const response = await fetch(`/api/accounts/admin/users/${userId}/status/`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\r\n                },\r\n                // Send new status as JSON to Django\r\n                body: JSON.stringify({ is_active: isActive }),\r\n            });\r\n            \r\n            if (response.ok) {\r\n                // Refresh user list to show updated status\r\n                fetchUsers();\r\n            }\r\n        } catch (error) {\r\n            // Silent error handling\r\n        }\r\n    };\r\n\r\n    /*\r\n     * UPDATE USER TYPE (CUSTOMER/ADMIN ROLE)\r\n     * \r\n     * This function manages user roles and permissions:\r\n     * 1. Updates user_type field in Django User model\r\n     * 2. Controls access levels (customer vs admin privileges)\r\n     * 3. Demonstrates role-based access control implementation\r\n     * 4. Shows how to update specific fields via REST API\r\n     */\r\n    const updateUserType = async (userId, userType) => {\r\n        try {\r\n            // Send PUT request to update user's role/type\r\n            const response = await fetch(`/api/accounts/admin/users/${userId}/type/`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\r\n                },\r\n                // Send new user type to Django\r\n                body: JSON.stringify({ user_type: userType }),\r\n            });\r\n            \r\n            if (response.ok) {\r\n                // Refresh user list to reflect role changes\r\n                fetchUsers();\r\n            }\r\n        } catch (error) {\r\n            // Silent error handling\r\n        }\r\n    };\r\n\r\n    // Loading state - show spinner while fetching users\r\n    if (loading) {\r\n        return (\r\n            <div className=\"flex justify-center items-center min-h-screen\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*\r\n     * MAIN COMPONENT RENDER - INTERACTIVE USER TABLE\r\n     * \r\n     * This renders a comprehensive user management interface with:\r\n     * 1. Tabular display of all users from Django\r\n     * 2. Inline editing for user roles (dropdown selection)\r\n     * 3. Status indicators with conditional styling\r\n     * 4. Action buttons for user activation/deactivation\r\n     * 5. Responsive design with Tailwind CSS\r\n     */\r\n    return (\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Users Management</h2>\r\n            \r\n            {/* RESPONSIVE TABLE - Shows all users with management controls */}\r\n            <div className=\"overflow-x-auto\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                    {/* TABLE HEADER */}\r\n                    <thead className=\"bg-gray-50\">\r\n                        <tr>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">User</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Type</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    \r\n                    {/* TABLE BODY - Dynamic rows for each user */}\r\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                        {/* \r\n                         * ARRAY MAPPING - Render each user from Django data\r\n                         * \r\n                         * This maps over the users array and creates a table row for each user.\r\n                         * Each row contains user information and interactive controls.\r\n                         */}\r\n                        {users.map((user) => (\r\n                            <tr key={user.id}>\r\n                                {/* USER NAME COLUMN */}\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <div className=\"flex items-center\">\r\n                                        <div className=\"ml-4\">\r\n                                            <div className=\"text-sm font-medium text-gray-900\">{user.username}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                \r\n                                {/* EMAIL COLUMN */}\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <div className=\"text-sm text-gray-900\">{user.email}</div>\r\n                                </td>\r\n                                \r\n                                {/* USER TYPE COLUMN - INLINE EDITING WITH DROPDOWN */}\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    {/* \r\n                                     * CONTROLLED SELECT INPUT\r\n                                     * \r\n                                     * This dropdown allows admins to change user roles instantly.\r\n                                     * - value: Current user type from Django data\r\n                                     * - onChange: Calls updateUserType function when changed\r\n                                     * - Demonstrates inline editing without separate forms\r\n                                     */}\r\n                                    <select\r\n                                        value={user.user_type}\r\n                                        onChange={(e) => updateUserType(user.id, e.target.value)}\r\n                                        className=\"rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n                                    >\r\n                                        <option value=\"customer\">Customer</option>\r\n                                        <option value=\"admin\">Admin</option>\r\n                                    </select>\r\n                                </td>\r\n                                \r\n                                {/* STATUS COLUMN - VISUAL STATUS INDICATOR */}\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    {/* \r\n                                     * CONDITIONAL STYLING - Status badge with dynamic colors\r\n                                     * \r\n                                     * Shows green for active users, red for inactive users.\r\n                                     * This provides immediate visual feedback about user status.\r\n                                     */}\r\n                                    <span className={`px-2 py-1 text-xs rounded-full ${\r\n                                        user.is_active\r\n                                            ? 'bg-green-100 text-green-800'  // Active user styling\r\n                                            : 'bg-red-100 text-red-800'      // Inactive user styling\r\n                                    }`}>\r\n                                        {user.is_active ? 'Active' : 'Inactive'}\r\n                                    </span>\r\n                                </td>\r\n                                \r\n                                {/* ACTIONS COLUMN - USER MANAGEMENT BUTTONS */}\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    {/* \r\n                                     * TOGGLE BUTTON - Activate/Deactivate Users\r\n                                     * \r\n                                     * This button toggles user status and updates Django backend.\r\n                                     * - onClick: Calls updateUserStatus with opposite of current status\r\n                                     * - Dynamic styling: Red for deactivate, green for activate\r\n                                     * - Dynamic text: Changes based on current user status\r\n                                     */}\r\n                                    <button\r\n                                        onClick={() => updateUserStatus(user.id, !user.is_active)}\r\n                                        className={`px-3 py-1 rounded-md ${\r\n                                            user.is_active\r\n                                                ? 'bg-red-100 text-red-600 hover:bg-red-200'    // Deactivate button\r\n                                                : 'bg-green-100 text-green-600 hover:bg-green-200' // Activate button\r\n                                        }`}\r\n                                    >\r\n                                        {user.is_active ? 'Deactivate' : 'Activate'}\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UsersManagement;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}